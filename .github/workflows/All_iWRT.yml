name: All iWRT

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Choose a target to build'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - slateax
          - nanopi-r5s
          - ax59u
          - brume2

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./config/WRT.config
  DIY_P1_SH: ./sh/WRT-part1.sh
  DIY_P2_SH: ./sh/WRT-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: false
  TZ: Europe/Moscow

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # The list of all possible targets.
          # This must match the filenames in the ./configs directory.
          targets="slateax nanopi-r5s ax59u brume2"
          
          # If 'all' is selected, include all targets. Otherwise, use the selected one.
          if [ "${{ github.event.inputs.target }}" == "all" ]; then
            selected_targets=$targets
          else
            selected_targets="${{ github.event.inputs.target }}"
          fi
          
          # Dynamically create the JSON for the matrix
          json_matrix="{\"include\":["
          
          first=true
          for target in $selected_targets; do
            if [ "$first" = false ]; then
              json_matrix="$json_matrix,"
            fi
            json_matrix="$json_matrix{\"target\":\"$target\"}"
            first=false
          done
          
          json_matrix="$json_matrix]}"
          
          echo "matrix=$json_matrix" >> $GITHUB_OUTPUT

  build:
    needs: setup
    if: ${{ needs.setup.outputs.matrix != '' && fromJson(needs.setup.outputs.matrix).include[0] != null }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      actions: write
      
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    name: Build for ${{ matrix.target }}

    steps:
    - name: Free up disk space
      run: |
        echo ">>> Freeing up disk space"
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache /opt/az /opt/microsoft "$AGENT_TOOLSDIRECTORY"
        sudo apt-get purge -y "azure*" "dotnet*" "ghc*" "llvm*" "mono*" "android*" || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
        
    - name: Checkout
      uses: actions/checkout@main

    - name: Load device configuration
      id: device_vars
      run: |
        echo ">>> Loading configuration for ${{ matrix.target }}"
        source ./config/conf/${{ matrix.target }}
        echo "TARGET_NAME=${TARGET_NAME}" >> $GITHUB_ENV
        echo "KERNEL_PATH=${KERNEL_PATH}" >> $GITHUB_ENV
        echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
        echo "DEVICE_CONFIG_COMMANDS<<EOF" >> $GITHUB_ENV
        echo "${DEVICE_CONFIG_COMMANDS}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/Gzxhwq/OpenWrt-Actions/main/depends-ubuntu-2204) build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: Cloning source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Apply custom patches
      run: |
        cd openwrt
        # Проверяем, существуют ли вообще патчи, чтобы не вызывать ошибку
        if [ -d "${{ github.workspace }}/patches" ] && [ -n "$(ls -A ${{ github.workspace }}/patches/*.patch 2>/dev/null)" ]; then
          echo ">>> Applying custom patches..."
          for p in ${{ github.workspace }}/patches/*.patch; do
            echo "Applying patch: $(basename "$p")"
            patch -p1 < "$p"
          done
        else
          echo ">>> No custom patches found to apply."
        fi
    
    - name: Prepare build environment
      run: |
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$FEEDS_CONF ] && mv $GITHUB_WORKSPACE/$FEEDS_CONF ./feeds.conf.default
        chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
        $GITHUB_WORKSPACE/$DIY_P1_SH
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Generate final configuration
      run: |
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && cp $GITHUB_WORKSPACE/$CONFIG_FILE ./.config
        [ -e $GITHUB_WORKSPACE/files ] && cp -r $GITHUB_WORKSPACE/files ./
        echo "--- Injecting config for ${{ env.TARGET_NAME }} ---"
        eval "$DEVICE_CONFIG_COMMANDS"
        echo "---------------------------------------------------------"
        chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH
        make defconfig
        
    - name: Show final config
      run: |
        echo "::group::Final .config for ${{ env.TARGET_NAME }}"
        cat openwrt/.config
        echo "::endgroup::"
    
    - name: Get and apply latest kernel hash
      id: get_hash
      run: |
        cd openwrt
        echo ">>> Getting latest kernel hash for ${{ env.KERNEL_PATH }}"
        KERNEL_LIST=$(curl -s https://immortalwrt.kyarucloud.moe/snapshots/targets/${{ env.KERNEL_PATH }}/kmods/ | grep -oE '6\.[0-9]+\.[0-9]+-[0-9]+-[a-f0-9]+')
        LATEST_HASH=$(echo "$KERNEL_LIST" | while read -r line; do
            version=$(echo "$line" | cut -d'-' -f1)
            major=$(echo "$version" | cut -d'.' -f1)
            minor=$(echo "$version" | cut -d'.' -f2)
            patch=$(echo "$version" | cut -d'.' -f3)
            printf "%03d%03d%03d %s\n" "$major" "$minor" "$patch" "$line"
        done | sort -r | head -n1 | cut -d' ' -f2 | cut -d'-' -f3)
        if [ -z "$LATEST_HASH" ]; then
          echo "::error::Failed to get kernel hash for ${{ env.KERNEL_PATH }}"
          exit 1
        fi
        echo "Latest hash is: ${LATEST_HASH}"
        echo "LATEST_HASH=${LATEST_HASH}" >> $GITHUB_ENV
        echo ">>> Applying hash to kernel-defaults.mk"
        sed -i "s/\$(MKHASH) md5/echo \"${LATEST_HASH}\"/g" include/kernel-defaults.mk

    - name: Fix permissions for custom uci-defaults files
      run: |
        cd openwrt
        if [ -d "files/etc/uci-defaults" ]; then
          echo ">>> Fixing permissions for custom uci-defaults zz* files"
          find files/etc/uci-defaults/ -name "zz*" -type f -exec chmod 0755 {} \;
        fi

    - name: Download toolchain and packages
      run: |
        cd openwrt
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compilation"
        make -j$(expr $(nproc) + 1) || make -j1 V=s
        echo "compile_status=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "compile=success" >> $GITHUB_OUTPUT
        if [ -s DEVICE_NAME ]; then
          echo "device-name=$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
        fi
        echo "file-date=$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT

    - name: Inspection of space utilization
      if: (!cancelled())
      run: df -hT

    - name: Cleanup build artifacts
      if: success()
      run: |
        echo ">>> Очистка build_dir и staging_dir"
        rm -rf openwrt/build_dir openwrt/staging_dir openwrt/tmp
        df -h
        
    - name: Uploading the bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.compile == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: ${{ matrix.target }}_iWRT${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
    
    # ... Остальные шаги (upload, release, delete) ...

    - name: Delete the workflow run
      uses: Mattraks/delete-workflow-runs@v2.0.6
      if: success() || failure()
      with:
        retain_days: 4
        keep_minimum_runs: 3
